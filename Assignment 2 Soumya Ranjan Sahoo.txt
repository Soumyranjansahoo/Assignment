

//Name- Soumya Ranjan Sahoo


//1.Given num expressed by sum of two prime num

#include <stdio.h>
int main() 
{
	int checkPrime(int num);
	int num, i, flag = 0;
  	printf("Enter a positive integer: ");
  	scanf("%d", &num);
  	for (i = 2; i <= num / 2; ++i) 
{
    	if (checkPrime(i) == 1) 
{
 
      	if (checkPrime(num - i) == 1) 
{
        printf("%d = %d + %d\n", num, i, num - i);
        flag = 1;
	}
    }
 }

  	if (flag == 0)
        printf("%d cannot be expressed as the sum of two prime numbers.", num);
  	return 0;
}
	int checkPrime(int num) {
  	int i, isPrime = 1;
	if (num == 0 || num == 1) {
    	isPrime = 0;
}
  else 
{
    for(i = 2; i <= num/2; ++i) 
{
      if(num % i == 0) {
      isPrime = 0;
      break;
      }
    }
  }

  return isPrime;
}

//2. REVERSE OF ARRAY


#include <stdio.h>
#define N 100
int main() 
{
    int arr[N];
    int n;
    printf("Enter the size of the array: ");
     scanf("%d", &n);
    printf("Enter an array: ");
    for (int i = 0; i< n; i++)
    {
        scanf("%d", &arr[i]);
    }
    printf("Reversed array: ");
    for (int i = n-1; i>=0; i--)
    {
        printf("%d ", arr[i]);
    }
    return 0;
}



//3.Reverse the k th position of array


#include <stdio.h>
int main()
{
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    int k;
    printf("enter the k position:-");
    scanf("%d",&k);
    int n = sizeof(arr) / sizeof(arr[0]);
 
    reverse(arr, n, k);
 
    for (int i = 0; i < n; i++)
        printf("%d ",arr[i]);
 
    return 0;
}
void reverse(int arr[], int n, int k)
{
    for (int i = 0; i < n; i += k)
    {
        int left = i;
        int right;
        if(i+k-1<n-1)
        right = i+k-1;
        else
        right = n-1;
    while (left < right)
            {
                int temp = arr[left];
                arr[left] = arr[right];
                arr[right] = temp;
                left++;
                right--;
            }
 
    }
}


//4 merger 2 string value


#include <stdio.h>
#include <string.h>
int main(void)
{
    char str1[100];
    char str2[100];
    char output[200];
    printf("enter strings");
    if (fgets(str1, sizeof(str1), stdin) != 0 &&
        fgets(str2, sizeof(str2), stdin) != 0)
    {
        char *end1 = str1 + strlen(str1) - 1;
        char *end2 = str2 + strlen(str2) - 1;
        if (*end1 == '\n')
            *end1 = '\0';
        if (*end2 == '\n')
            *end2 = '\0';
        merge(str1, str2, output);
        printf("Out: %s\n", output);
    }
}

void merge(const char *s1, const char *s2, char *output)
{
    while (*s1 != '\0' && *s2 != '\0')
    {
        *output++ = *s1++;
        *output++ = *s2++;
    }
    while (*s1 != '\0')
        *output++ = *s1++;
    while (*s2 != '\0')
        *output++ = *s2++;
    *output = '\0';
}


//5.equlibrium


#include <stdio.h>
int main()
{
    int arr[] = { -7, 1, 5, 2, -4, 3, 0 };
    int arr_size = sizeof(arr) / sizeof(arr[0]);
    printf("%d", equilibrium(arr, arr_size));
    getchar();
    return 0;
}
int equilibrium(int arr[], int n)
{
    int i, j;
    int leftsum, rightsum;
   for (i = 0; i < n; ++i) 
   {
       leftsum = 0;
        for (j = 0; j < i; j++)
            leftsum += arr[j];
         rightsum = 0;
        for (j = i + 1; j < n; j++)
            rightsum += arr[j];
         if (leftsum == rightsum)
            return i;
    }
    return -1;
}



